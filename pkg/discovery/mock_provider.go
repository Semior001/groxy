// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package discovery

import (
	"context"
	"sync"
)

// Ensure, that ProviderMock does implement Provider.
// If this is not the case, regenerate this file with moq.
var _ Provider = &ProviderMock{}

// ProviderMock is a mock implementation of Provider.
//
// 	func TestSomethingThatUsesProvider(t *testing.T) {
//
// 		// make and configure a mocked Provider
// 		mockedProvider := &ProviderMock{
// 			EventsFunc: func(ctx context.Context) <-chan string {
// 				panic("mock out the Events method")
// 			},
// 			NameFunc: func() string {
// 				panic("mock out the Name method")
// 			},
// 			RulesFunc: func(ctx context.Context) ([]*Rule, error) {
// 				panic("mock out the Rules method")
// 			},
// 		}
//
// 		// use mockedProvider in code that requires Provider
// 		// and then make assertions.
//
// 	}
type ProviderMock struct {
	// EventsFunc mocks the Events method.
	EventsFunc func(ctx context.Context) <-chan string

	// NameFunc mocks the Name method.
	NameFunc func() string

	// RulesFunc mocks the Rules method.
	RulesFunc func(ctx context.Context) ([]*Rule, error)

	// calls tracks calls to the methods.
	calls struct {
		// Events holds details about calls to the Events method.
		Events []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Rules holds details about calls to the Rules method.
		Rules []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockEvents sync.RWMutex
	lockName   sync.RWMutex
	lockRules  sync.RWMutex
}

// Events calls EventsFunc.
func (mock *ProviderMock) Events(ctx context.Context) <-chan string {
	if mock.EventsFunc == nil {
		panic("ProviderMock.EventsFunc: method is nil but Provider.Events was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockEvents.Lock()
	mock.calls.Events = append(mock.calls.Events, callInfo)
	mock.lockEvents.Unlock()
	return mock.EventsFunc(ctx)
}

// EventsCalls gets all the calls that were made to Events.
// Check the length with:
//     len(mockedProvider.EventsCalls())
func (mock *ProviderMock) EventsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockEvents.RLock()
	calls = mock.calls.Events
	mock.lockEvents.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *ProviderMock) Name() string {
	if mock.NameFunc == nil {
		panic("ProviderMock.NameFunc: method is nil but Provider.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedProvider.NameCalls())
func (mock *ProviderMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Rules calls RulesFunc.
func (mock *ProviderMock) Rules(ctx context.Context) ([]*Rule, error) {
	if mock.RulesFunc == nil {
		panic("ProviderMock.RulesFunc: method is nil but Provider.Rules was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRules.Lock()
	mock.calls.Rules = append(mock.calls.Rules, callInfo)
	mock.lockRules.Unlock()
	return mock.RulesFunc(ctx)
}

// RulesCalls gets all the calls that were made to Rules.
// Check the length with:
//     len(mockedProvider.RulesCalls())
func (mock *ProviderMock) RulesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRules.RLock()
	calls = mock.calls.Rules
	mock.lockRules.RUnlock()
	return calls
}
