version: 1

# by default, groxy will respond with the status code INTERNAL and the message "didn't match the request to any rule".
not-matched:
  status: { code: "NOT_FOUND", message: "some custom not found" }

rules:
    # next method is an example of server streaming
  - match: { uri: "com.github.Semior001.groxy.example.mock.ExampleService/ServerStream" }
    respond:
      stream:
        def: "message ServerStreamResponse { option (groxypb.target) = true; string message = 1; }"
        values:
          - message: "first message"
          - message: "second message"
          - message: "third message"

    # The next rule will respond with a predefined message.
  - match:
      uri: "com.github.Semior001.groxy.example.mock.ExampleService/Stub"
      header: { test: true }
      body: |
        message StubRequest {
            option (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "needed value"];
        }
    respond:
      body: |
        message StubResponse {
            // this option specifies that the message is a response
            option              (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "needed value received"];
            int32 code     = 2 [(groxypb.value)  = "200"];
        }

    # The next rule will respond with a predefined message.
  - match:
      uri: "com.github.Semior001.groxy.example.mock.ExampleService/Stub"
      body: |
        message StubRequest {
            option (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "needed value"];
        }
    respond:
      body: |
        message StubResponse {
            // this option specifies that the message is a response
            option              (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "lol that works"];
            int32 code     = 2 [(groxypb.value)  = "400"];
        }

    # The same example as above, but with the target response dependant.
  - match: { uri: "com.github.Semior001.groxy.example.mock.ExampleService/Stub" }
    respond:
      body: |
        message Dependency {
            string some_dependant_value = 6;
        }
        
        message StubResponse {
            // this option specifies that the message is a response
            option (groxypb.target) = true; 
            Dependency dependency = 3 [(groxypb.value)  = '{"some_dependant_value": "Hello, World!"}'];
        }

    # The next rule will respond with an error message.
  - match: { uri: "com.github.Semior001.groxy.example.mock.ExampleService/Error" }
    respond:
      status: { code: "INVALID_ARGUMENT", message: "invalid request" }
      metadata:
        header: { X-Request-Id: "123"   }
        trailer: { Powered-By:   "groxy" }
