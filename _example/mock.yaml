version: 1

# by default, groxy will respond with the status code INTERNAL and the message "didn't match the request to any rule".
not-matched:
  status: { code: "NOT_FOUND", message: "some custom not found" }

# defines the list of upstreams to be referenced further in the rules.
upstreams:
  example-1:
    address: "localhost:50051" # the address of the upstream service
    tls: false                 # if true, groxy will use a secure connection
    serve-reflection: true     # if true, groxy will include responses to the reflection service

  example-2:
    address: "localhost:50052"
    tls: false
    serve-reflection: true

rules:
    # The next rule will respond with a predefined message on the request with header "test: true".
  - match:
      uri: "com.github.Semior001.groxy.example.mock.ExampleService/Stub"
      header: { test: true }
      body: |
        message StubRequest {
            option (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "needed value"];
        }
    respond:
      body: |
        message StubResponse {
            // this option specifies that the message is a response
            option              (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "needed value received"];
            int32 code     = 2 [(groxypb.value)  = "200"];
        }

    # The next rule is almost the same as the previous one, but the response is templated:
    # random UUID will be provided in the response message.
  - match:
      uri: "com.github.Semior001.groxy.example.mock.ExampleService/Stub"
      body: |
        message StubRequest {
            option (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "random"];
        }
    respond:
      body: |
        message StubResponse { 
            option (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "{{uuid}}"];
        }

    # The next rule will respond with a predefined message on any request that matches URI and request body.
  - match:
      uri: "com.github.Semior001.groxy.example.mock.ExampleService/Stub"
      body: |
        message StubRequest {
            option (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "needed value"];
        }
    respond:
      body: |
        message StubResponse {
            // this option specifies that the message is a response
            option              (groxypb.target) = true; 
            string message = 1 [(groxypb.value)  = "lol that works"];
            int32 code     = 2 [(groxypb.value)  = "400"];
        }

    # The same example as above, but with the target response dependant.
  - match: { uri: "com.github.Semior001.groxy.example.mock.ExampleService/Stub" }
    respond:
      body: |
        message Dependency {
            string some_dependant_value = 6;
            bool   some_dependant_bool  = 7;
            string some_rich_text       = 8;
        }
        
        message StubResponse {
            // this option specifies that the message is a response
            option (groxypb.target) = true; 
        
            Dependency dependency = 3 [(groxypb.value)  = `{
                "some_dependant_value": "some value",
                "some_dependant_bool":  true,
                "some_rich_text":       "some text"
            }`];
        }

    # The next rule will respond with an error message.
  - match: { uri: "com.github.Semior001.groxy.example.mock.ExampleService/Error" }
    respond:
      status: { code: "INVALID_ARGUMENT", message: "invalid request" }
      metadata:
        header: { X-Request-Id: "123"   }
        trailer: { Powered-By:   "groxy" }

    # The next rule will forward the request to the specified upstream.
  - match: { uri: "com.github.Semior001.groxy.example.mock.Upstream/Get" }
    forward:
      upstream: example-1
      header:
        X-Request-Id: "123"

